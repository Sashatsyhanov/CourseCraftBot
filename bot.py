import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from handlers import course
from dotenv import load_dotenv
import os
import aiosqlite
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

DB_NAME = "course_progress.db"

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
donate_button = types.InlineKeyboardMarkup().add(
    types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://yoomoney.ru/to/4100119062540797")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å—á—ë—Ç
)

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_courses (
                user_id INTEGER PRIMARY KEY,
                course TEXT,
                current_day INTEGER,
                chat_id INTEGER,
                progress INTEGER,
                skill TEXT,
                current_question INTEGER,
                experience TEXT,
                goal TEXT,
                preferences TEXT
            )
        """)
        await db.commit()

async def load_user_courses():
    user_courses = {}
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT * FROM user_courses") as cursor:
            rows = await cursor.fetchall()
            for row in rows:
                user_id = row[0]
                user_courses[user_id] = {
                    "course": eval(row[1]) if row[1] else [],
                    "current_day": row[2],
                    "chat_id": row[3],
                    "progress": row[4],
                    "skill": row[5],
                    "current_question": row[6],
                    "experience": row[7],
                    "goal": row[8],
                    "preferences": row[9]
                }
    return user_courses

async def save_user_course(user_id, course_data):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            INSERT OR REPLACE INTO user_courses (
                user_id, course, current_day, chat_id, progress, skill, current_question, experience, goal, preferences
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id, str(course_data.get("course", [])), course_data.get("current_day", 0), course_data.get("chat_id", 0),
            course_data.get("progress", 0), course_data.get("skill", ""), course_data.get("current_question", 0),
            course_data.get("experience", ""), course_data.get("goal", ""), course_data.get("preferences", "")
        ))
        await db.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
def get_return_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup()
    if user_id in course.user_courses and course.user_courses[user_id].get("course"):
        keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É", callback_data="return_to_lesson"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∫—É—Ä—Å", callback_data="start_course"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await state.finish()
    await course.start(message, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@dp.message_handler(Command("help"))
async def cmd_help(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    await state.finish()
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø CourseCraftBot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏! üöÄ\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
        "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —É—Ä–æ–∫–∞–º–∏:</b>\n"
        "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é\n"
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫—É—Ä—Å –Ω–∞ 7-–º –¥–Ω–µ\n"
        "–¢—ã –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å ‚Äî —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫\n"
        "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ —É—Ä–æ–∫—É\n"
        "–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫\n"
        "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫—É—Ä—Å–∞ ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∫—É—Ä—Å–∞\n\n"
        "–ü–æ –ª—é–±–æ–º—É –ø–æ–≤–æ–¥—É –ø–∏—à–∏ –º–Ω–µ ‚Äî —è –ø–æ–º–æ–≥—É! üéØ"
    )
    keyboard = get_return_keyboard(message.from_user.id)
    await message.reply(help_text, reply_markup=keyboard, parse_mode="HTML")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

# –ö–æ–º–∞–Ω–¥–∞ /feedback
@dp.message_handler(Command("feedback"))
async def start_feedback(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /feedback –æ—Ç {message.from_user.id}")
    await state.finish()
    keyboard = get_return_keyboard(message.from_user.id)
    await message.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ! –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å?", reply_markup=keyboard)
    await FeedbackState.waiting_for_feedback.set()

@dp.message_handler(state=FeedbackState.waiting_for_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    feedback = message.text
    await bot.send_message(795056847, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {message.from_user.id}:\n{feedback}")
    keyboard = get_return_keyboard(message.from_user.id)
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=keyboard)
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /donate
@dp.message_handler(Command("donate"))
async def send_donate(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /donate –æ—Ç {message.from_user.id}")
    await state.finish()
    keyboard = get_return_keyboard(message.from_user.id)
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å! –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∑–¥–µ—Å—å:", reply_markup=donate_button)
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

async def on_startup(_):
    await init_db()
    global user_courses
    user_courses = await load_user_courses()
    course.register_course_handlers(dp, user_courses)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(_):
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∫—É—Ä—Å"
async def start_course_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await course.start(callback_query.message, None)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É"
async def return_to_lesson_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = callback_query.from_user.id
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –∫—É—Ä—Å—É –¥–ª—è user_id={user_id}")
    if user_id in course.user_courses and course.user_courses[user_id].get("course"):
        logger.info(f"–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å: {course.user_courses[user_id]}")
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await course.send_lesson(user_id, callback_query.message, bot)
    else:
        logger.info(f"–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {user_id}, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π")
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await course.start(callback_query.message, None)
    await callback_query.answer()

if __name__ == "__main__":
    dp.register_callback_query_handler(start_course_callback, lambda c: c.data == "start_course")
    dp.register_callback_query_handler(return_to_lesson_callback, lambda c: c.data == "return_to_lesson")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)